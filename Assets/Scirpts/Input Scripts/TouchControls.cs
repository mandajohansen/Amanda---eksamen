//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scirpts/Input Scripts/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Popup"",
            ""id"": ""e21667a9-0dc5-4aa1-935a-cabfd4afad53"",
            ""actions"": [
                {
                    ""name"": ""Adgang"",
                    ""type"": ""Button"",
                    ""id"": ""58298f1b-89c3-4122-843f-23e9970c6707"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ingenadgang"",
                    ""type"": ""Button"",
                    ""id"": ""9404eb5d-fde7-4f26-a85f-7a01ab11dbca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Begrænset"",
                    ""type"": ""Button"",
                    ""id"": ""db706468-89ff-4bdc-8438-0de17caf575f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""becfc2b2-f570-4f45-94af-3e9062b5d9bd"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Adgang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9f74307-1fc4-463d-a8d3-34d0092c04ff"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Adgang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5bb1e8d-288a-4211-ad83-78c6b57e39f2"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Ingenadgang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""858bc374-eb5e-446b-b351-b7ac499b80ae"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Ingenadgang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14be0356-e2dd-48dd-84cd-75e9caa9323c"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Begrænset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5cb14e6-65fd-4fc4-b231-67d653d10f97"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Begrænset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Popup
        m_Popup = asset.FindActionMap("Popup", throwIfNotFound: true);
        m_Popup_Adgang = m_Popup.FindAction("Adgang", throwIfNotFound: true);
        m_Popup_Ingenadgang = m_Popup.FindAction("Ingenadgang", throwIfNotFound: true);
        m_Popup_Begrænset = m_Popup.FindAction("Begrænset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Popup
    private readonly InputActionMap m_Popup;
    private IPopupActions m_PopupActionsCallbackInterface;
    private readonly InputAction m_Popup_Adgang;
    private readonly InputAction m_Popup_Ingenadgang;
    private readonly InputAction m_Popup_Begrænset;
    public struct PopupActions
    {
        private @TouchControls m_Wrapper;
        public PopupActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Adgang => m_Wrapper.m_Popup_Adgang;
        public InputAction @Ingenadgang => m_Wrapper.m_Popup_Ingenadgang;
        public InputAction @Begrænset => m_Wrapper.m_Popup_Begrænset;
        public InputActionMap Get() { return m_Wrapper.m_Popup; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PopupActions set) { return set.Get(); }
        public void SetCallbacks(IPopupActions instance)
        {
            if (m_Wrapper.m_PopupActionsCallbackInterface != null)
            {
                @Adgang.started -= m_Wrapper.m_PopupActionsCallbackInterface.OnAdgang;
                @Adgang.performed -= m_Wrapper.m_PopupActionsCallbackInterface.OnAdgang;
                @Adgang.canceled -= m_Wrapper.m_PopupActionsCallbackInterface.OnAdgang;
                @Ingenadgang.started -= m_Wrapper.m_PopupActionsCallbackInterface.OnIngenadgang;
                @Ingenadgang.performed -= m_Wrapper.m_PopupActionsCallbackInterface.OnIngenadgang;
                @Ingenadgang.canceled -= m_Wrapper.m_PopupActionsCallbackInterface.OnIngenadgang;
                @Begrænset.started -= m_Wrapper.m_PopupActionsCallbackInterface.OnBegrænset;
                @Begrænset.performed -= m_Wrapper.m_PopupActionsCallbackInterface.OnBegrænset;
                @Begrænset.canceled -= m_Wrapper.m_PopupActionsCallbackInterface.OnBegrænset;
            }
            m_Wrapper.m_PopupActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Adgang.started += instance.OnAdgang;
                @Adgang.performed += instance.OnAdgang;
                @Adgang.canceled += instance.OnAdgang;
                @Ingenadgang.started += instance.OnIngenadgang;
                @Ingenadgang.performed += instance.OnIngenadgang;
                @Ingenadgang.canceled += instance.OnIngenadgang;
                @Begrænset.started += instance.OnBegrænset;
                @Begrænset.performed += instance.OnBegrænset;
                @Begrænset.canceled += instance.OnBegrænset;
            }
        }
    }
    public PopupActions @Popup => new PopupActions(this);
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPopupActions
    {
        void OnAdgang(InputAction.CallbackContext context);
        void OnIngenadgang(InputAction.CallbackContext context);
        void OnBegrænset(InputAction.CallbackContext context);
    }
}
